# Приложение управления пользователями

Простое Angular приложение для отображения и фильтрации списка пользователей с возможностью поиска и просмотра деталей.

##  Функциональность

- **Отображение списка пользователей** с полями: id, name, email, active
- **Поиск по имени** - фильтрация в реальном времени
- **Фильтрация по статусу** - показать всех, только активных или только неактивных пользователей
- **Просмотр email** - при клике на пользователя отображается его email в отдельном блоке
- **Минимальная стилизация** - чистый и современный интерфейс

##  Технологии

- **Angular CLI** - для создания и управления проектом
- **Angular 18+** - современный фреймворк с standalone компонентами
- **TypeScript** - типизированный JavaScript
- **CSS** - минимальная стилизация
- **Signals** - реактивное состояние (Angular 16+)
- **Docker** - контейнеризация приложения
- **Nginx** - веб-сервер для продакшена

##  Требования

- Node.js 18+ 
- npm 9+
- Angular CLI
- Docker и Docker Compose (для контейнеризации)

##  Запуск с Docker

### Быстрый старт
`ash
# Сборка и запуск контейнера
docker-compose up --build

# Приложение будет доступно по адресу: http://localhost:4200
`

### Команды Docker
`ash
# Сборка образа
docker build -t users-app .

# Запуск контейнера
docker run -p 4200:80 users-app

# Остановка контейнера
docker-compose down

# Просмотр логов
docker-compose logs -f
`

##  Локальная разработка

### 1. Установка зависимостей
`ash
cd users-app
npm install
`

### 2. Запуск приложения
`ash
npm start
`
или
`ash
npx ng serve --open
`

### 3. Открытие в браузере
Приложение будет доступно по адресу: http://localhost:4200

##  Структура проекта

`
src/
 app/
    services/
       user.ts          # Сервис с данными пользователей
    users/
       users.ts         # Компонент пользователей
       users.html       # Шаблон компонента
       users.css        # Стили компонента
    app.ts               # Корневой компонент
    app.html             # Корневой шаблон
    app.css              # Глобальные стили
 Dockerfile               # Конфигурация Docker
 docker-compose.yml       # Docker Compose конфигурация
 nginx.conf              # Конфигурация Nginx
 .dockerignore           # Исключения для Docker
`

##  Основные компоненты

### UserService (services/user.ts)
- Содержит интерфейс User с полями: id, name, email, active
- Предоставляет массив тестовых данных пользователей
- Метод getUsers() возвращает список всех пользователей

### Users Component (users/users.ts)
- **Состояние**: использует Angular Signals для реактивности
- **Поиск**: searchQuery - сигнал для текста поиска
- **Фильтр**: statusFilter - сигнал для фильтрации по статусу
- **Выбор**: selectedEmail - сигнал для отображения выбранного email
- **Вычисляемое свойство**: ilteredUsers - автоматически фильтрует пользователей

### Шаблон (users/users.html)
- Поле ввода для поиска по имени
- Выпадающий список для фильтрации по статусу
- Список пользователей с возможностью клика
- Блок отображения выбранного email

##  Стилизация

Применена минимальная стилизация с использованием:
- CSS Grid для компоновки
- Flexbox для выравнивания элементов
- Современные CSS переменные
- Плавные переходы и hover-эффекты
- Адаптивный дизайн

##  Использование

1. **Поиск**: Введите имя пользователя в поле поиска
2. **Фильтрация**: Выберите статус из выпадающего списка:
   - "Все" - показать всех пользователей
   - "Активные" - только активные пользователи
   - "Неактивные" - только неактивные пользователи
3. **Просмотр email**: Кликните на любого пользователя в списке
4. **Сброс**: Очистите поле поиска и выберите "Все" для сброса фильтров

##  Команды разработки

`ash
# Запуск dev-сервера
npm start

# Сборка для продакшена
npm run build

# Запуск тестов
npm test

# Линтинг кода
npm run lint

# Генерация нового компонента
npx ng generate component component-name

# Генерация нового сервиса
npx ng generate service service-name
`

##  Особенности реализации

- **Standalone компоненты** - современный подход Angular без NgModules
- **Signals** - реактивное состояние вместо RxJS для простых случаев
- **Computed signals** - автоматическое пересчитывание фильтрованного списка
- **TypeScript** - строгая типизация для надежности кода
- **Сервис-ориентированная архитектура** - разделение данных и логики
- **Docker контейнеризация** - легкое развертывание и масштабирование
- **Nginx оптимизация** - сжатие, кэширование, поддержка SPA роутинга

##  Возможные улучшения

- Добавление анимаций при фильтрации
- Подсветка совпадений в поиске
- Пагинация для больших списков
- Сохранение состояния фильтров в localStorage
- Добавление тестов
- Интеграция с реальным API
- Kubernetes манифесты для оркестрации
- CI/CD пайплайн с GitHub Actions

##  Поддержка

При возникновении проблем:
1. Убедитесь, что все зависимости установлены: 
pm install
2. Проверьте версию Node.js: 
ode --version
3. Проверьте Docker: docker --version и docker-compose --version
4. Очистите кэш: 
pm cache clean --force
5. Переустановите зависимости: 
m -rf node_modules && npm install
6. Пересоберите Docker образ: docker-compose build --no-cache

---

**Создано с помощью Angular CLI и Docker** 
